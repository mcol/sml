#ifndef EXPANDED_MODEL_H
#define EXPANDED_MODEL_H

/* This is the Expanded version of the AMPL model 
(as opposed to the FLAT version). 

It serves to define a tree representation of the model that has a node for
EVERY submodel (rather than just every type of submodel as the FLAT model)

It would serve as an intermediate step between the AmplModel view of
the world (which seems the right structure for a Benders type solver -
complicating constaints/variables are associated with the parent node)
and the OOPS view of the world (where complicating
variables/constraints belong to off-diagonal subblocks)

This would still be in the Benders view.

*/
#include <list>
#include <vector>
#include <string>
class ExpandedModel;
class NlFile;
#include "ampl.h"

/** 
 * @class ExpandedModel
 * @brief A model (block) in the expanded model tree. It corresponds roughly to
 *        the a "diagonal" node in the OOPS algebra tree.
 * 
 *  The ExpandedModel object roughly corresponds to a "diagonal" node in the 
 *  OOPS Matrix tree. The difference is that complicating variables/constraints
 *  belong to the parent node in the ExpandedModel tree, whereas in the OOPS
 *  matrix tree, they would belong to the final diagonal child node.
 *
 *  The ExpandedModel tree is the natural representation for a (Benders)
 *  decomposition solver, where complicating variables/constraints do 
 *  indeed belong to the master problem.
 *
 *  An ExpandedModel is defined by an NlFile (given information about
 *  its constraints) as well as a variable list. The variable list is first
 *  given as a list of variable names that have been defined as local to this
 *  node in the structured AMPL file ExpandedModel::localVarDef
 *  This is compared against the variables that are defined in the NlFile
 *  (obtained from the *.col file corresponding to the *.nl file)
 *  and translated into 
 *   - number of local variables: ExpandedModel::nLocalVars
 *   - list of names of local variables: ExpandedModel::listOfVarNames
 *   - their indices in the NlFile: ExpandedModel::listOfVars
 */
class ExpandedModel {

 public:
  
  // local information:
  string model_file; //!< name of the *.nl file that describes the problem data
  NlFile *nlfile;   //!< The NlFile object associated with model_file
  //list of constraints
  // FIXME: can we assume that all constraints in *.nl belong to this node?
  //list of variables
  //FIXME: in which form? regex? numbers?
  // BOTH: regex at the start. Info on numbers can be generated by a 
  //       class method
 
  int nLocalVars;  //!< number of local variables
  int nLocalCons;  //!< number of locl constraints
  
  /** list of global names of local variables */
  list<string> listOfVarNames; //!< list of local variables

  /** indices of local variables in the corresponding *.nl file */
  int *listOfVars;          //!< indices of local variables in *.nl file


  /** Indicator if information on local variables 
   *  (nLocalVars, listLocalVars, nLocalCons) has been obtained by comparing 
   *  the localVarDef's with the *.col file
   */
  bool localVarInfoSet;     //!< indicator, if local variable info has been set

  list<string> localVarDef;  //!< the locally applicable variable declarations
  
  //int nLocalVarDef; // #of definitions of local variables

  /** list of child nodes (vector, so that it can be indexed) */
  vector <ExpandedModel*> children;  //!< list of children
  ExpandedModel *parent;         //!< parent node 

  /** A stack of block instances that encode the current path through the
   * ExpandedModel tree during the construction phase                     */
  static list<string> pathToNodeStack;   //!< stack of instance names

  // -------------------------- methods ------------------------------------
  // public:
  /** takes FLAT AmplModel tree and expands it into an ExpandedModel tree */
  ExpandedModel(AmplModel *model);

  ExpandedModel();     //< constructor

  void print();            //< Recursively print contents of this instance
  
  /** Return nb local vars (make sure setLocalVarInfo is called first) */
  int getNLocalVars();    

  /** Return nb local cons (make sure setLocalVarInfo is called first) */
  int getNLocalCons();

  /** sets nLocalVar, listOfVars, nLocalCons, listOfVarNames.
   *  
   */
  void setLocalVarInfo(); 

};

#endif
